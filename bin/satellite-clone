#!/usr/bin/env python

import argparse
import os
import sys
from ansible.cli.playbook import PlaybookCLI


def yes_or_no(question):
    while "the answer is invalid":
        reply = str(raw_input(question + ' (y/n): ')).lower().strip()
        if reply[0] == 'y':
            return True
        if reply[0] == 'n':
            exit(1)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose",
                        action="store_true",
                        dest="verbose",
                        default=False,
                        help="verbose output")
    parser.add_argument("--start-at-task",
                        action="store",
                        dest="start_at_task",
                        help="Start at a specific task")
    parser.add_argument("--step",
                        action="store_true",
                        dest="step",
                        default=False,
                        help="interactive: confirm each task before running")
    args = parser.parse_args()

    PRODUCTION_INSTALL_PATH = "/usr/share/satellite-clone"
    DEFAULT_PLAYBOOK_FILE = os.path.join(PRODUCTION_INSTALL_PATH,
                                         "satellite-clone-playbook.yml")

    yes_or_no("This will initiate satellite-clone. Do you want to proceed?")

    ansible_args = []
    if args.verbose:
        ansible_args.append("-vvv")
    if args.start_at_task:
        ansible_args.append("--start-at-task")
        ansible_args.append(args.start_at_task)
    if args.step:
        ansible_args.append("--step")

    if not os.path.isdir(PRODUCTION_INSTALL_PATH):
        sys.stdout.write("It looks like satellite-clone has"
                         " not been installed properly, {0} does not exist."
                         .format(PRODUCTION_INSTALL_PATH))
        exit(1)

    os.environ["ANSIBLE_CONFIG"] = os.path.join(PRODUCTION_INSTALL_PATH,
                                                'ansible.production.cfg')

    inventory_path = os.path.join(PRODUCTION_INSTALL_PATH, 'inventory')
    inventory_path = os.path.join(PRODUCTION_INSTALL_PATH, 'inventory')
    ansible_playbook = (["ansible-playbook", "-i", inventory_path] +
                        ansible_args +
                        [DEFAULT_PLAYBOOK_FILE])

    sys.stdout.write(" ".join(ansible_playbook))

    cli = PlaybookCLI(ansible_playbook)
    cli.parse()
    cli.run()


if __name__ == '__main__':
    main()
