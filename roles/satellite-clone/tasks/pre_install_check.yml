---
- include: pre_install_check_migration.yml
  when: rhel_migration

- name: find root partition's free space
  when: item.mount == "/"
  set_fact: root_free_space="{{ (item.size_available | int) / 1000000000}}"
  with_items: "{{ hostvars[inventory_hostname] ['ansible_mounts'] }}"

- debug:
    msg: "Free space in root partition is {{ root_free_space }}GB and required
          free space is atleast {{ required_root_free_space }}GB. ***NOTE:***
          If you have more pulp data, it is your responsibility to check for
          the required free space.  Perhaps you can increase the
          required_root_free_space variable to a desired high value."

- name: Check if root has enough space
  fail: msg="Your root partition should atleast have {{ required_root_free_space }}GB but it contains only {{ root_free_space }}GB"
  when: root_free_space | int <= required_root_free_space | int

- name: Check the presence of config tar file
  stat:
    path: '{{ backup_dir }}/config_files.tar.gz'
    get_checksum: False
    get_md5: False
  register: config_result
- name: Fail if the config tar file is not present or not accessible
  fail: msg="{{ backup_dir }}/config_files.tar.gz is not present or not accessible"
  when: not config_result.stat.exists

- name: Check the presence of mongo tar file
  stat:
    path: '{{ backup_dir }}/mongo_data.tar.gz'
    get_checksum: False
    get_md5: False
  register: mongo_result
- name: Fail if the mongo tar file is not present or not accessible
  fail: msg="{{ backup_dir }}/mongo_data.tar.gz is not present or not accessible"
  when: not mongo_result.stat.exists

- name: Check the presence of pgsql tar file (for cloning only)
  stat:
    path: '{{ backup_dir }}/pgsql_data.tar.gz'
    get_checksum: False
    get_md5: False
  register: pgsql_result
  when: not rhel_migration
- name: Fail if the pgsql tar file is not present or not accessible (for cloning only)
  fail: msg="{{ backup_dir }}/pgsql_data.tar.gz is not present or not accessible"
  when: not rhel_migration and not pgsql_result.stat.exists

- name: Check the presence of pulp tar file
  stat:
    path: '{{ backup_dir }}/pulp_data.tar'
    get_checksum: False
    get_md5: False
  register: pulp_result
  when: include_pulp_data
- name: Fail if the pulp tar file is not present or not accessible
  fail: msg="{{ backup_dir }}/pulp_data.tar is not present or not accessible"
  when: include_pulp_data and not pulp_result.stat.exists

- include: pre_install_check_migration.yml
  when: rhel_migration
